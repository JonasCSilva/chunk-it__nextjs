import { Flex, Button, Heading, useColorMode, Slider, SliderTrack, SliderFilledTrack, SliderThumb, Skeleton } from '@chakra-ui/react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useContext } from 'react'
import { ColorsContext } from '../contexts/ColorsContext'
import { TimerContext } from '../contexts/TimerContext'
import { CurrentTimeContext } from '../contexts/CurrentTimeContext'
import { ChallengesContext } from '../contexts/ChallengesContext'

const Home: NextPage = () => {
  const { colorMode, toggleColorMode } = useColorMode()

  const { bgColor, hoverBgColor } = useContext(ColorsContext)
  const { hasFinished, isActive2, startCountdown, resetCountdown, time, time2, setTime, initialTime3 } = useContext(TimerContext)
  const { currentTime } = useContext(CurrentTimeContext)
  const { activeChallenge, resetChallenge, completeChallenge } = useContext(ChallengesContext)

  const minutes = Math.floor(time / 60)
  const seconds = time % 60

  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('')
  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('')

  const [hour2, minute2, second] = currentTime.split(':')
  const [second2, ampm] = second.split(' ')

  const basicSpanStyle = {
    fontFamily: 'Rajdhani',
    as: 'span' as const,
    textAlign: 'center' as const
  }

  const spanStyle = {
    ...basicSpanStyle,
    fontSize: '8.5rem',
    w: '5.75rem',
    mx: '1px',
    bgColor: hasFinished ? 'red' : bgColor
  }

  const spanStyle2 = {
    ...basicSpanStyle,
    fontSize: '5.5rem',
    verticalAlign: 'middle',
    w: '3rem'
  }

  const rightSpanStyle = {
    ...spanStyle,
    borderBottomRightRadius: '6px',
    borderTopRightRadius: '6px'
  }

  const leftSpanStyle = {
    ...spanStyle,
    borderBottomLeftRadius: '6px',
    borderTopLeftRadius: '6px'
  }

  return (
    <Flex flex={1}>
      <Head>
        <title>{`${minuteLeft}${minuteRight}:${secondLeft}${secondRight} - Chunk.It`}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Flex flex={1} align='center' justify='center' direction='column'>
        <Flex align='center' justify='center' bg={bgColor} borderRadius={'6px'} mt={'3%'} px={'1%'} py={'0.5%'}>
          <Skeleton isLoaded={currentTime !== '99:99:99 PM'}>
            <Flex align='center' justify='center' borderRadius={'6px'}>
              <Flex>
                <Heading {...spanStyle2}>{hour2[0]}</Heading>
                <Heading {...spanStyle2}>{hour2[1]}</Heading>
              </Flex>
              <Heading {...spanStyle2} w='2rem'>
                :
              </Heading>
              <Flex>
                <Heading {...spanStyle2}>{minute2[0]}</Heading>
                <Heading {...spanStyle2}>{minute2[1]}</Heading>
              </Flex>
              <Heading {...spanStyle2} w='2rem'>
                :
              </Heading>
              <Flex>
                <Heading {...spanStyle2}>{second2[0]}</Heading>
                <Heading {...spanStyle2}>{second2[1]}</Heading>
              </Flex>
              <Flex w='2rem' />
              <Heading {...spanStyle2} w='7rem'>
                {ampm}
              </Heading>
            </Flex>
          </Skeleton>
        </Flex>
        <Flex width='100%' height='80%' align='center' justify='center'>
          <Flex w={'30%'} align='center' justify='center' direction='column'>
            <Slider
              min={1}
              max={59}
              defaultValue={25}
              width={80}
              my={10}
              id='slider-track-1'
              onChange={(value: number) => {
                initialTime3.current = value * 60
                time2.current = value * 60
                setTime(value * 60)
              }}
              isDisabled={isActive2}
            >
              <SliderTrack>
                <SliderFilledTrack />
              </SliderTrack>
              <SliderThumb />
            </Slider>
            <Flex align='center' justify='center' borderRadius={'6px'}>
              <Flex>
                <Heading {...leftSpanStyle}>{minuteLeft}</Heading>
                <Heading {...rightSpanStyle}>{minuteRight}</Heading>
              </Flex>
              <Heading {...spanStyle} w='2.5rem' bgColor={undefined}>
                :
              </Heading>
              <Flex>
                <Heading {...leftSpanStyle}>{secondLeft}</Heading>
                <Heading {...rightSpanStyle}>{secondRight}</Heading>
              </Flex>
            </Flex>
            <Button
              onClick={() => {
                if (!isActive2) {
                  startCountdown()
                  Notification.requestPermission()
                } else if (isActive2 && !hasFinished) {
                  resetCountdown(false)
                } else {
                  resetCountdown(true)
                }
              }}
              bg={(() => {
                if (!isActive2) {
                  return bgColor
                } else if (isActive2 && !hasFinished) {
                  return 'red'
                } else {
                  return 'green'
                }
              })()}
              _hover={{
                background: (() => {
                  if (!isActive2) {
                    return hoverBgColor
                  } else if (isActive2 && !hasFinished) {
                    return 'red.500'
                  } else {
                    return 'green.500'
                  }
                })()
              }}
              size={'lg'}
              my={8}
            >
              {(() => {
                if (!isActive2) {
                  return 'Start'
                } else if (isActive2 && !hasFinished) {
                  return 'Cancel'
                } else {
                  return 'Stop'
                }
              })()}
            </Button>
            <Button onClick={toggleColorMode} size={'lg'} mb={6} bg={bgColor} _hover={{ background: hoverBgColor }}>
              Toggle to {colorMode === 'light' ? 'Dark' : 'Light'}
            </Button>
          </Flex>
          <Flex w={'5%'} />
          <Flex w={'30%'} bg={bgColor} h={'60%'} borderRadius={'6px'}>
            <Flex justify='center' align='center' width='100%' direction='column'>
              <Heading my={8} h={'10%'}>
                Current Task:
              </Heading>
              <Flex h={'80%'} w={'80%'}>
                {activeChallenge ? (
                  <Heading size={'lg'} textAlign='justify' w={'100%'}>
                    {activeChallenge.description}
                  </Heading>
                ) : (
                  <Heading size={'lg'} textAlign='center' w={'100%'}>
                    ???????????
                  </Heading>
                )}
              </Flex>
            </Flex>
          </Flex>
        </Flex>
      </Flex>
    </Flex>
  )
}

export default Home
